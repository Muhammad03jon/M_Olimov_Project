import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.compose import ColumnTransformer
from category_encoders import TargetEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from catboost import CatBoostClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc
import joblib

st.title('\U0001F4B5 –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data_url = "https://raw.githubusercontent.com/your-dataset.csv"
df = pd.read_csv(data_url)

# –í—ã–≤–æ–¥ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
with st.expander('–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'):
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("X (–ü—Ä–∏–∑–Ω–∞–∫–∏)")
        X_raw = df.drop('ideal_plan', axis=1)
        st.dataframe(X_raw)
    with col2:
        st.subheader("y (–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)")
        y_raw = df['ideal_plan']
        st.dataframe(y_raw.to_frame())

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X_train, X_test, y_train, y_test = train_test_split(X_raw, y_raw, test_size=0.3, random_state=42)

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
categorical_features = X_raw.select_dtypes(include=['object']).columns
encoder = TargetEncoder(cols=categorical_features)
X_train = encoder.fit_transform(X_train, y_train)
X_test = encoder.transform(X_test)

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
with st.sidebar:
    st.header("–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
    model_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", ["Logistic Regression", "Decision Tree", "Random Forest", "CatBoost"])
    
    if model_choice == "Logistic Regression":
        model = LogisticRegression(multi_class='multinomial', solver='lbfgs')
    elif model_choice == "Decision Tree":
        model = DecisionTreeClassifier()
    elif model_choice == "Random Forest":
        model = RandomForestClassifier()
    elif model_choice == "CatBoost":
        model = CatBoostClassifier(verbose=0)
    
    model.fit(X_train_scaled, y_train)

# –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
st.title("üìû –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞")

st.sidebar.header("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞")

# –ü–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
gender = st.sidebar.selectbox("–ü–æ–ª:", ["Male", "Female"])

# –í–æ–∑—Ä–∞—Å—Ç –∏ —Å—Ç–∞—Ç—É—Å –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞
age = st.sidebar.slider("–í–æ–∑—Ä–∞—Å—Ç:", 18, 100, 30)
SeniorCitizen = 1 if age >= 65 else 0

# –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
Partner = st.sidebar.radio("–ï—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä?", ["Yes", "No"])
Dependents = st.sidebar.radio("–ï—Å—Ç—å –∏–∂–¥–∏–≤–µ–Ω—Ü—ã?", ["Yes", "No"])

# –°—Ç–∞–∂ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥
tenure = st.sidebar.slider("–°—Ç–∞–∂ (–º–µ—Å—è—Ü—ã):", 0, 72, 12)

# –£—Å–ª—É–≥–∏ —Å–≤—è–∑–∏
PhoneService = st.sidebar.radio("–ü–æ–¥–∫–ª—é—á–µ–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è —Å–≤—è–∑—å?", ["Yes", "No"])
MultipleLines = st.sidebar.radio("–ù–µ—Å–∫–æ–ª—å–∫–æ –ª–∏–Ω–∏–π?", ["Yes", "No phone service", "No"])

# –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—É—Å–ª—É–≥–∏
OnlineSecurity = st.sidebar.radio("–ó–∞—â–∏—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ?", ["Yes", "No", "No internet service"])
OnlineBackup = st.sidebar.radio("–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ?", ["Yes", "No", "No internet service"])
DeviceProtection = st.sidebar.radio("–ó–∞—â–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤?", ["Yes", "No", "No internet service"])
TechSupport = st.sidebar.radio("–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞?", ["Yes", "No", "No internet service"])
StreamingTV = st.sidebar.radio("–°—Ç—Ä–∏–º–∏–Ω–≥ –¢–í?", ["Yes", "No", "No internet service"])
StreamingMovies = st.sidebar.radio("–°—Ç—Ä–∏–º–∏–Ω–≥ —Ñ–∏–ª—å–º–æ–≤?", ["Yes", "No", "No internet service"])

# –ö–æ–Ω—Ç—Ä–∞–∫—Ç
Contract = st.sidebar.selectbox("–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", ["Month-to-month", "One year", "Two year"])
PaperlessBilling = st.sidebar.radio("–ë–µ–∑–±—É–º–∞–∂–Ω—ã–π –±–∏–ª–ª–∏–Ω–≥?", ["Yes", "No"])

# –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
PaymentMethod = st.sidebar.selectbox("–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", ["Electronic check", "Mailed check", "Bank transfer (automatic)", "Credit card (automatic)"])

# –í—ã–≤–æ–¥ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
st.subheader("üìù –í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞")
input_data = {
    "gender": gender,
    "SeniorCitizen": SeniorCitizen,
    "Partner": Partner,
    "Dependents": Dependents,
    "tenure": tenure,
    "PhoneService": PhoneService,
    "MultipleLines": MultipleLines,
    "OnlineSecurity": OnlineSecurity,
    "OnlineBackup": OnlineBackup,
    "DeviceProtection": DeviceProtection,
    "TechSupport": TechSupport,
    "StreamingTV": StreamingTV,
    "StreamingMovies": StreamingMovies,
    "Contract": Contract,
    "PaperlessBilling": PaperlessBilling,
    "PaymentMethod": PaymentMethod
}
input_df = pd.DataFrame([input_data])
st.dataframe(input_df)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å"):
    input_df = pd.DataFrame([input_data])
    input_df = encoder.transform(input_df)
    input_df = scaler.transform(input_df)
    prediction = model.predict(input_df)[0]
    st.subheader("üîÆ –ò–¥–µ–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ: ")
    st.write(prediction)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è CatBoost
if model_choice == "CatBoost":
    importance = model.get_feature_importance()
    fig, ax = plt.subplots()
    ax.barh(X_raw.columns, importance)
    ax.set_xlabel('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
    ax.set_title('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è CatBoost')
    st.pyplot(fig)
